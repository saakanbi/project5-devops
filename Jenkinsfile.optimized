pipeline {
    agent any
    
    environment {
        FLASK_ALB_DNS = "flask-app-alb-416560770.us-east-1.elb.amazonaws.com"
        FLASK_APP_IP = "44.203.53.132"
        JENKINS_IP = "18.212.250.55"
        MONITORING_IP = "54.159.146.237"
        NEXUS_URL = "http://54.91.22.91:8081"
        NEXUS_REPOSITORY = "flask-app-repo"
        NEXUS_CREDENTIAL_ID = "nexus-credentials"
        SONARQUBE_URL = "http://54.91.58.139:9000"
        IMAGE_NAME = "flask-app"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    
    options {
        // Add pipeline optimization options
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        skipDefaultCheckout(true) // We'll do checkout explicitly
        timestamps()
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Clean workspace before checkout
                cleanWs()
                checkout scm
            }
        }
        
        stage('Parallel: Build & Analysis') {
            parallel {
                stage('Build Application') {
                    steps {
                        dir('app') {
                            sh 'pip install -r requirements.txt'
                            sh 'python -m pytest'
                        }
                    }
                }
                
                stage('SonarQube Analysis') {
                    steps {
                        withSonarQubeEnv('SonarQube') {
                            sh 'pip install pytest pytest-cov'
                            sh 'cd app && python -m pytest --cov=. --cov-report=xml:../coverage.xml'
                            sh "sonar-scanner -Dsonar.host.url=${SONARQUBE_URL}"
                        }
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Build & Push Docker Image') {
            steps {
                dir('app') {
                    // Build and push in one stage to reduce pipeline steps
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                    
                    withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIAL_ID}", passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
                        sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}"
                        sh "echo ${NEXUS_PASSWORD} | docker login ${NEXUS_URL} -u ${NEXUS_USERNAME} --password-stdin"
                        sh "docker push ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }
        
        stage('Deploy & Update Monitoring') {
            steps {
                echo 'Deploying application to Flask server'
                sshagent(['flask-ssh-key']) {
                    sh """
                        ssh ec2-user@${FLASK_APP_IP} 'docker pull ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}'
                        ssh ec2-user@${FLASK_APP_IP} 'docker stop flask-app || true'
                        ssh ec2-user@${FLASK_APP_IP} 'docker rm flask-app || true'
                        ssh ec2-user@${FLASK_APP_IP} 'docker run -d -p 80:5000 --name flask-app ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}'
                    """
                }
                
                // Update monitoring in the same stage
                sshagent(['monitoring-ssh-key']) {
                    sh """
                        ssh ec2-user@${MONITORING_IP} 'cat > prometheus.yml << EOF
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: "prometheus"
    static_configs:
      - targets: ["localhost:9090"]

  - job_name: "flask_dashboard"
    metrics_path: /metrics
    static_configs:
      - targets: ["${FLASK_APP_IP}:80"]

  - job_name: "node_exporter"
    static_configs:
      - targets: ["localhost:9100"]
EOF'
                        ssh ec2-user@${MONITORING_IP} 'docker cp prometheus.yml prometheus:/etc/prometheus/'
                        ssh ec2-user@${MONITORING_IP} 'curl -X POST http://localhost:9090/-/reload'
                        
                        scp grafana/dashboards/flask_metrics.json ec2-user@${MONITORING_IP}:~/flask_metrics.json
                        ssh ec2-user@${MONITORING_IP} 'curl -X POST http://localhost:3000/api/dashboards/db -H "Content-Type: application/json" -d @flask_metrics.json'
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            sh "docker logout ${NEXUS_URL} || true"
            sh "docker system prune -f || true"  // Clean up Docker resources
            cleanWs()
        }
    }
}