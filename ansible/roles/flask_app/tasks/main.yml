- name: Check if Amazon Linux
  raw: cat /etc/os-release | grep -q "Amazon Linux"
  register: is_amazon_linux
  changed_when: false
  ignore_errors: true

- name: Install Python, pip, and Nginx on Amazon Linux
  raw: amazon-linux-extras install -y nginx1 && yum install -y python3 python3-pip
  when: is_amazon_linux is succeeded and is_amazon_linux.rc == 0

- name: Install Python, pip, and Nginx on other systems
  raw: yum install -y python3 python3-pip nginx || apt-get update && apt-get install -y python3 python3-pip nginx
  when: is_amazon_linux is failed or is_amazon_linux.rc != 0

- name: Ensure Nginx is started and enabled
  raw: systemctl enable nginx && systemctl start nginx
  ignore_errors: true

- name: Install Python packages
  raw: pip3 install flask gunicorn prometheus_client
  ignore_errors: true

- name: Create Flask app directory
  raw: mkdir -p /opt/flask_dashboard && chown -R ec2-user:ec2-user /opt/flask_dashboard && chmod 755 /opt/flask_dashboard
  ignore_errors: true

- name: Create simple Flask app file
  raw: |
    cat > /opt/flask_dashboard/app.py << 'EOF'
    from flask import Flask, render_template
    from prometheus_client import Counter, generate_latest, CONTENT_TYPE_LATEST

    app = Flask(__name__)
    
    # Create a metric to track requests
    REQUEST_COUNT = Counter('app_requests_total', 'Total app requests')
    
    @app.route('/')
    def home():
        REQUEST_COUNT.inc()
        return "Flask Dashboard is running!"
    
    @app.route('/metrics')
    def metrics():
        return generate_latest(), 200, {'Content-Type': CONTENT_TYPE_LATEST}
    
    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=8000)
    EOF
    chown ec2-user:ec2-user /opt/flask_dashboard/app.py
    chmod 644 /opt/flask_dashboard/app.py
  ignore_errors: true

- name: Create requirements.txt
  raw: |
    cat > /opt/flask_dashboard/requirements.txt << 'EOF'
    flask
    gunicorn
    prometheus_client
    EOF
    chown ec2-user:ec2-user /opt/flask_dashboard/requirements.txt
    chmod 644 /opt/flask_dashboard/requirements.txt
  ignore_errors: true

- name: Create systemd service for Gunicorn
  raw: |
    cat > /etc/systemd/system/flaskapp.service << 'EOF'
    [Unit]
    Description=Gunicorn Flask Dashboard
    After=network.target

    [Service]
    User=ec2-user
    WorkingDirectory=/opt/flask_dashboard
    ExecStart=/usr/local/bin/gunicorn --workers 3 --bind 0.0.0.0:8000 app:app
    Restart=always

    [Install]
    WantedBy=multi-user.target
    EOF
  ignore_errors: true

- name: Reload systemd and start flaskapp
  raw: systemctl daemon-reload && systemctl enable flaskapp && systemctl start flaskapp
  ignore_errors: true

- name: Configure Nginx
  raw: |
    cat > /etc/nginx/conf.d/flaskapp.conf << 'EOF'
    server {
      listen 80;
      server_name _;

      location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
      }
    }
    EOF
  ignore_errors: true

- name: Restart Nginx
  raw: systemctl restart nginx
  ignore_errors: true
